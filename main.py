from dwave.system import AutoEmbeddingComposite, DWaveSampler

import dwave.inspector

sampler = DWaveSampler(solver="Advantage_system6.1")
solver = AutoEmbeddingComposite(sampler)


# from article
h = {0: 130.5, 1: 107.5, 2: 130.5, 3: 107.5, 4: -41, 5: -82, 6:  3, 7: 6, 8: -137, 9: -81, 10: -107, 11: -81}
J = {(0, 1): 2, (0, 2): 79, (0, 3): 47.5, (0, 4): -2, (0, 5): -4, (0, 6): -8, (0, 7): -16, (0, 8): -148, (0, 9): -84,
     (0, 10): 0, (0, 11): 0, (1, 2): 47.5, (1, 3): 71, (1, 4): -8, (1, 5): -16, (1, 6): 1, (1, 7): 2, (1, 8): 6,
     (1, 9): 6, (1, 10): -124, (1, 11): -84, (2, 3): 2, (2, 4): -2, (2, 5): -4, (2, 6): -8, (2, 7): -16, (2, 8): -148,
     (2, 9): 0, (2, 10): 0, (2, 11): -84, (3, 4): -8, (3, 5): -16, (3, 6): 1, (3, 7): 2, (3, 8): 6, (3, 9): -84,
     (3, 10): -124, (3, 11): 6, (4, 5): 34, (4, 6): -4, (4, 7): -8, (4, 8): -8, (4, 9): 1, (4, 10): 2, (4, 11): 1,
     (5, 6): -8, (5, 7): -16, (5, 8): -16, (5, 9): 2, (5, 10): 4, (5, 11): 2, (6, 7): 34, (6, 8): 0, (6, 9): -4,
     (6, 10): -8, (6, 11): -4, (7, 8): 0, (7, 9): -8, (7, 10): -16, (7, 11): -8, (8, 9): 0, (8, 10): 1, (8, 11): 0,
     (9, 10): 0, (9, 11): 0, (10, 11): 0}

result = solver.sample_ising(h, J, num_reads=1000)

solution = result.first

p1 = int(solution.sample[0]/2 + 0.5)
p2 = int(solution.sample[1]/2 + 0.5)
q1 = int(solution.sample[2]/2 + 0.5)
q2 = int(solution.sample[3]/2 + 0.5)

print(solution)
print("p =", int(f"1{p2}{p1}1", 2))
print("q =", int(f"1{q2}{q1}1", 2))
dwave.inspector.show(result)
